{"version":3,"sources":["components/UserList/UserList.module.css","components/UserList/UserModal/UserModal.module.css","components/UserList/User/User.module.css","types/redux-types/redux-types.ts","http/api.ts","components/UserList/User/User.tsx","components/UserList/UserModal/Repository/Repository.tsx","utils/consts.ts","components/UserList/UserModal/UserModal.tsx","selectors/users-selectors.ts","components/UserList/UserList.tsx","redux/actions/users-AC.ts","App.tsx","redux/reducers/users-reducer.ts","redux/store.ts","index.tsx","components/UserList/UserModal/Repository/Repository.module.css"],"names":["module","exports","UserActionTypes","gitHubAPI","q","axios","get","url","User","user","setCurrentUser","className","style","userWrapper","onClick","avatar","img","src","avatar_url","alt","login","repos","Repository","repository","link","target","href","html_url","rel","repoWrapper","name","repoInfo","forks","stargazers_count","initialUser","email","location","created_at","followers","following","bio","repos_url","initialUserRepos","id","UserModal","useState","userData","setUserData","userRepos","setUserRepos","searchValue","setSearchValue","useEffect","then","event","data","modal","modalContent","titleWrapper","title","boldText","userInfo","slice","inputWrapper","input","value","onChange","type","filter","repo","includes","map","userListSelector","state","users","userList","UserList","userName","setUserName","currentUser","useSelector","dispatch","useDispatch","FETCH_GITHUB_USERS","payload","e","placeholder","items","App","initialState","usersReducer","reducersObj","action","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efd7ef27.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userList\":\"UserList_userList__1fMD9\",\"input\":\"UserList_input__14mH9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"UserModal_modal__1DUue\",\"modalContent\":\"UserModal_modalContent__1QGE-\",\"titleWrapper\":\"UserModal_titleWrapper__34Jck\",\"title\":\"UserModal_title__1ZsjY\",\"boldText\":\"UserModal_boldText__3xByK\",\"user\":\"UserModal_user__1SbWx\",\"userWrapper\":\"UserModal_userWrapper__Y6Bsd\",\"avatar\":\"UserModal_avatar__14ym3\",\"userInfo\":\"UserModal_userInfo__1kc6H\",\"inputWrapper\":\"UserModal_inputWrapper__3Scc0\",\"input\":\"UserModal_input__2rrOm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userWrapper\":\"User_userWrapper__2h4am\",\"avatar\":\"User_avatar__2KFCg\",\"img\":\"User_img__b0GCk\",\"login\":\"User_login__GX3BY\",\"repos\":\"User_repos__1doLX\"};","export interface action {\n  type: string;\n  payload?: any;\n}\n\nexport enum UserActionTypes {\n  FETCH_GITHUB_USERS = 'FETCH_GITHUB_USERS',\n}\n\nexport interface FetchGitHubUsersA {\n  type: UserActionTypes.FETCH_GITHUB_USERS;\n  payload: any;\n}\n\nexport type UserAction = FetchGitHubUsersA;\n\nexport interface usersState {\n  userList: userObj[] | null;\n}\n\nexport interface userObj {\n  avatar_url: string;\n  login: string | null;\n  email: string | null;\n  location: string | null;\n  created_at: string | null;\n  followers: number | null;\n  following: number | null;\n  bio: string | null;\n  url: string | null;\n  repos_url: string | null;\n}\n\nexport interface repositoryObj {\n  id: number | null;\n  name: string | null;\n  forks: number | null;\n  stargazers_count: number | null;\n  html_url: string;\n}\n","import axios from 'axios';\n\nexport const gitHubAPI = {\n  getUsers(q: string) {\n    return axios.get(`https://api.github.com/search/users?q=${q}`);\n  },\n  getUserData(url: string) {\n    return axios.get(url);\n  },\n  getUserRepos(url: string) {\n    return axios.get(url);\n  },\n};","import React from 'react';\nimport style from './User.module.css';\nimport { userObj } from '../../../types/redux-types/redux-types';\n\ninterface UserProps {\n  user: userObj;\n  setCurrentUser: (user: userObj) => void;\n}\n\nconst User = ({ user, setCurrentUser }: UserProps) => {\n  return (\n    <div className={style.userWrapper} onClick={() => setCurrentUser(user)}>\n      <span className={style.avatar}>\n        <img className={style.img} src={user.avatar_url} alt=\"user avatar\" />\n      </span>\n      <span className={style.login}>Login: {user.login}</span>\n      <span className={style.repos}>Repos: ##</span>\n    </div>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport style from './Repository.module.css';\nimport { repositoryObj } from '../../../../types/redux-types/redux-types';\n\ninterface RepositoryProps {\n  repository: repositoryObj;\n}\n\nconst Repository = ({ repository }: RepositoryProps) => {\n  return (\n    <a className={style.link} target=\"_blank\" href={repository.html_url} rel=\"noreferrer\">\n      <div className={style.repoWrapper}>\n        <span>{repository.name}</span>\n        <div className={style.repoInfo}>\n          <span>{repository.forks} Forks</span>\n          <span>{repository.stargazers_count} Stars</span>\n        </div>\n      </div>\n    </a>\n  );\n};\n\nexport default Repository;\n","import { userObj } from '../types/redux-types/redux-types';\n\nexport const initialUser: userObj = {\n  avatar_url: '',\n  login: null,\n  email: null,\n  location: null,\n  created_at: null,\n  followers: null,\n  following: null,\n  bio: null,\n  url: null,\n  repos_url: null,\n};\n\nexport const initialUserRepos = [\n  {\n    id: 1,\n    name: '',\n    forks: null,\n    stargazers_count: null,\n    html_url: '',\n  },\n];","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport style from './UserModal.module.css';\nimport Repository from './Repository/Repository';\nimport { gitHubAPI } from '../../../http/api';\nimport { repositoryObj, userObj } from '../../../types/redux-types/redux-types';\nimport { initialUser, initialUserRepos } from '../../../utils/consts';\n\ninterface UserModalProps {\n  user: userObj;\n  setCurrentUser: (user: userObj | null) => void;\n}\n\nconst UserModal = ({ user, setCurrentUser }: UserModalProps) => {\n  const [userData, setUserData] = useState<userObj>(initialUser);\n  const [userRepos, setUserRepos] = useState<repositoryObj[]>(initialUserRepos);\n  const [searchValue, setSearchValue] = useState<string>('');\n\n  useEffect(() => {\n    if (user.url)\n      gitHubAPI.getUserData(user.url).then((event) => {\n        setUserData(event.data);\n      });\n\n    if (user.repos_url)\n      gitHubAPI.getUserRepos(user.repos_url).then((event) => {\n        setUserRepos(event.data);\n      });\n  }, [user.url, user.repos_url]);\n\n  const changeSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n  };\n\n  return (\n    <div className={style.modal}>\n      <div className={style.modalContent}>\n        <div className={style.titleWrapper}>\n          <div className={style.title}>\n            <span className={style.boldText}>Git Hub Searcher</span>\n            <button onClick={() => setCurrentUser(null)}>Close</button>\n          </div>\n          <div className={style.userWrapper}>\n            <img className={style.avatar} src={user.avatar_url} alt=\"user avatar\" />\n            <div className={style.userInfo}>\n              <span>Login: {userData.login}</span>\n              <span>Email: {userData.email}</span>\n              <span>Location: {userData.location}</span>\n              <span>Join date: {userData.created_at?.slice(0, 10)}</span>\n              <span>{userData.followers} Followers</span>\n              <span>Following {userData.following}</span>\n            </div>\n          </div>\n          <span>{userData.bio}</span>\n        </div>\n        <div className={style.inputWrapper}>\n          <input className={style.input} value={searchValue} onChange={changeSearch} type=\"text\" />\n        </div>\n        <div>\n          {userRepos\n            .filter((repo) => repo?.name?.includes(searchValue))\n            .map((repo) => (\n              <Repository key={repo.id} repository={repo} />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserModal;\n","import { RootState } from '../redux/store';\n\nexport const userListSelector = (state: RootState) => state.users.userList;","import React, { ChangeEvent, useEffect, useState } from 'react';\nimport style from './UserList.module.css';\nimport { gitHubAPI } from '../../http/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchGitHubUsers } from '../../redux/actions/users-AC';\nimport User from './User/User';\nimport UserModal from './UserModal/UserModal';\nimport { userListSelector } from '../../selectors/users-selectors';\nimport { userObj } from '../../types/redux-types/redux-types';\n\nconst UserList = () => {\n  const [userName, setUserName] = useState<string>('');\n  const [currentUser, setCurrentUser] = useState<userObj | null>(null);\n\n  const userList = useSelector(userListSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (userName) {\n      gitHubAPI.getUsers(userName).then((event) => {\n        dispatch(fetchGitHubUsers(event.data));\n      });\n    }\n  }, [userName, dispatch]);\n\n  const changeName = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserName(e.target.value);\n  };\n\n  return (\n    <div className={style.userList}>\n      <h1>Git Hub Searcher</h1>\n      <input\n        className={style.input}\n        value={userName}\n        onChange={changeName}\n        type=\"text\"\n        placeholder=\"Search for Users\"\n      />\n      {userList?.items?.map((user: userObj) => (\n        <User key={user.login} setCurrentUser={setCurrentUser} user={user} />\n      ))}\n      {currentUser ? <UserModal user={currentUser} setCurrentUser={setCurrentUser} /> : null}\n    </div>\n  );\n};\n\nexport default UserList;\n","import { UserActionTypes } from '../../types/redux-types/redux-types';\n\nexport function fetchGitHubUsers(users: any) {\n  return {\n    type: UserActionTypes.FETCH_GITHUB_USERS,\n    payload: users,\n  };\n}\n","import React from 'react';\nimport UserList from './components/UserList/UserList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"wrapper\">\n      <UserList />\n    </div>\n  );\n}\n\nexport default App;\n","import { UserAction, UserActionTypes, usersState } from '../../types/redux-types/redux-types';\n\nconst initialState: usersState = {\n  userList: null,\n};\n\nfunction usersReducer(state = initialState, action: UserAction) {\n  switch (action.type) {\n    case UserActionTypes.FETCH_GITHUB_USERS:\n      return {\n        ...state,\n        userList: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n\nexport default usersReducer;\n","import { combineReducers, compose, createStore } from 'redux';\nimport usersReducer from './reducers/users-reducer';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst reducersObj = {\n  users: usersReducer,\n};\n\nlet reducers = combineReducers(reducersObj);\n\nexport type RootState = ReturnType<typeof reducers>;\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"repoWrapper\":\"Repository_repoWrapper__1m7gc\",\"repoInfo\":\"Repository_repoInfo__2Viy1\",\"link\":\"Repository_link__11X1M\"};"],"sourceRoot":""}